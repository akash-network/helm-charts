# Default values for provider.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

beta: false

image:
  repository: ghcr.io/ovrclk/akash
  pullPolicy: IfNotPresent
  provider_services_tag: 0.1.0-rc13

from:
key:
keysecret:
chainid: akashnet-2
domain:
home: "/root/.akash"
node: "http://akash.c29r3.xyz:80/rpc"
keyringbackend: "test"
trustnode: "true"

#  Providers should set these based on their configuration,
#  these cannot be generic, hence commented.
# attributes:
#   - key: region
#     value: us-west
#   - key: host
#     value: akash
#   - key: tier
#     value: community
#   - key: organization
#     value: akash.network
#   - key: capabilities/storage/1/class
#     value: default
#   - key: capabilities/storage/1/persistent
#     value: true
#   - key: capabilities/storage/2/class
#     value: beta2
#   - key: capabilities/storage/2/persistent
#     value: true

# Your provider contact details we submit to the chain
email:
website:

# Important to know about the gas and fees:
#
# fees = (gas * gas-prices) as per Cosmos SDK docs.
# (200000 * 0.025uakt) = 5000uakt floor fee for most of RPC nodes.
#
# Akash RPC nodes set --minimum-gas-prices=0.025uakt which gives
# 5000uakt minimum fee when multiplied by the gas price (200000 default).
#
# Akash clients should respect this and set --gas-prices to 0.025uakt
#
# Note that RPC node running without minimum-gas-prices set will accept
# 0uakt fee transactions which is not desirable as per Cosmos SDK docs.
#
# --gas argument works only when --gas-prices is set!
# Note that the clients cannot provide both fees and gas prices!
#
# Anything you set here will get globally exposed via AKASH_GAS_PRICES,
# AKASH_GAS, AKASH_GAS_ADJUSTMENT environment variables in
# charts/akash-provider/templates/deployment.yaml
gasprices: "0.025uakt"
# set --gas to 200000 (or higher) to meet Akash RPC's minimum fees, (--minimum-gas-prices X 200000) = 5000uakt.
# or set --gas to "auto" to leverage the gasadjustment setting;
# increase gasadjustment to tackle "out of gas" issues, i.e. https://github.com/ovrclk/akash/issues/1508
gas: "auto"
# Note that --gas-adjustment is working only when --gas is "auto"!
gasadjustment: "1.25"

# If you plan to use bid price script, then make sure to set bidpricescript variable to the base64 encoded contents of the script.
# This will automatically switch AKASH_BID_PRICE_STRATEGY from "scale" (default) to "shellScript".
# Sample scripts can be found under charts/akash-provider/scripts/ directory.
# Example usage:
# --set bidpricescript="$(cat ./charts/akash-provider/scripts/price_script_generic.sh | openssl base64 -A)"
bidpricecpuscale: "0.004"
bidpricememoryscale: "0.0016"
bidpriceendpointscale: "0"
# set storage pricing for your StorageClass you are using
# here is an example for beta2 StorageClass:
bidpricestoragescale: "0.00016,beta2=0.00016"
withdrawalperiod: "1h"
minimumbalance: "10000000"

deploymentnetworkpoliciesenabled: "false"

ipoperator: true

debug: "false"
waitready: 30s

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name:

podSecurityContext: {}

securityContext: {}

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
