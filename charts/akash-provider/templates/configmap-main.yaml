apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "provider.fullname" . }}-main
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "provider.fullname" . }}
    {{- include "provider.labels" . | nindent 4 }}
data:
  # Debug config
  AKASH_DEBUG: "{{ $.Values.debug }}"
  
  # Boot config
  AKASH_BOOT_KEYS: "/boot-keys"
  
  # Cosmos-SDK client config
  AKASH_HOME: "{{ .Values.home }}"
  AKASH_FROM: "{{ .Values.from }}"
  AKASH_NODE: "{{ .Values.node }}"
  AKASH_CHAIN_ID: "{{ .Values.chainid }}"
  AKASH_KEYRING_BACKEND: "{{ .Values.keyringbackend }}"
  AKASH_BROADCAST_MODE: "block"
  AKASH_VERSION: "{{ .Values.image.tag | default .Chart.AppVersion }}"
  AKASH_YES: "true"
  AKASH_LOG_LEVEL: "info"
  
  # Akash IP operator config
  AKASH_IP_OPERATOR: "{{ .Values.ipoperator }}"
  
  # Akash provider config
  AKASH_DEPLOYMENT_INGRESS_DOMAIN: "ingress.{{ .Values.domain }}"
  DEPLOYMENT_NETWORK_POLICIES_ENABLED: "{{ .Values.deploymentnetworkpoliciesenabled }}"
  AKASH_DEPLOYMENT_INGRESS_STATIC_HOSTS: "true"
  AKASH_DEPLOYMENT_BLOCKED_HOSTNAMES: ""
  AKASH_CLUSTER_NODE_PORT_QUANTITY: "{{ .Values.cluster_node_port_quantity }}"
  AKASH_GAS_PRICES: "{{ .Values.gasprices }}"
  AKASH_GAS: "{{ .Values.gas }}"
  AKASH_GAS_ADJUSTMENT: "{{ .Values.gasadjustment }}"
  AP_MINIMUM_GAS_PRICES: "0.0025uakt"
  # AKASH_CLUSTER_PUBLIC_HOSTNAME need to stay as this makes to
  # 'akash provider lease-status` under the forwarded_ports (nodePorts).
  # This is NOT used for connecting to K8s cluster itself (6443/tcp).
  # akash-provider uses kubeconfig to connect to K8s cluster.
  AKASH_CLUSTER_PUBLIC_HOSTNAME: "provider.{{ .Values.domain }}"
  AKASH_BID_PRICE_STRATEGY: "{{ ternary "scale" "shellScript" (empty .Values.bidpricescript) }}"
  
  # Bid pricing config
  AKASH_BID_PRICE_CPU_SCALE: "{{ .Values.bidpricecpuscale }}"
  AKASH_BID_PRICE_MEMORY_SCALE: "{{ .Values.bidpricememoryscale }}"
  AKASH_BID_PRICE_ENDPOINT_SCALE: "{{ .Values.bidpricendpointscale }}"
  AKASH_BID_PRICE_STORAGE_SCALE: "{{ .Values.bidpricestoragescale }}"
  AKASH_BID_PRICE_IP_SCALE: "{{ .Values.bidpriceipscale }}"
  
  # Overcommit percentages
  AKASH_OVERCOMMIT_PCT_CPU: "{{ .Values.overcommit_pct_cpu }}"
  AKASH_OVERCOMMIT_PCT_MEM: "{{ .Values.overcommit_pct_mem }}"
  AKASH_OVERCOMMIT_PCT_STORAGE: "{{ .Values.overcommit_pct_storage }}"
  
  # Cluster config
  AKASH_CLUSTER_K8S: "true"
  KUBE_CONFIG: "{{ .Values.home }}/.kube/config"
  AKASH_DEPLOYMENT_RUNTIME_CLASS: "none"
  
  # Financial config
  AKASH_WITHDRAWAL_PERIOD: "{{ .Values.withdrawalperiod }}"
  AKASH_MINIMUM_BALANCE: "{{ .Values.minimumbalance }}"
  AKASH_BID_DEPOSIT: "{{ .Values.bidmindeposit }}"
  AKASH_TX_BROADCAST_TIMEOUT: "{{ .Values.tx_broadcast_timeout }}"
  
  # Monitor config
  AKASH_MONITOR_MAX_RETRIES: {{ if (hasKey (.Values.monitor | default dict) "maxRetries") }}{{ (.Values.monitor | default dict).maxRetries | quote }}{{ else }}"40"{{ end }}
  AKASH_MONITOR_RETRY_PERIOD: {{ (.Values.monitor | default dict).retryPeriod | default "4s" | quote }}
  AKASH_MONITOR_RETRY_PERIOD_JITTER: {{ (.Values.monitor | default dict).retryPeriodJitter | default "15s" | quote }}
  AKASH_MONITOR_HEALTHCHECK_PERIOD: {{ (.Values.monitor | default dict).healthcheckPeriod | default "10s" | quote }}
  AKASH_MONITOR_HEALTHCHECK_PERIOD_JITTER: {{ (.Values.monitor | default dict).healthcheckPeriodJitter | default "5s" | quote }}

